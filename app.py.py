# -*- coding: utf-8 -*-
"""BIA COPY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18a9LZBjctSo2G6y6PtlqAzUK93Pq-Kfi
"""

import os
import time
import logging
import warnings
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import accuracy_score, classification_report, mean_squared_error, r2_score

# ✅ Suppress warnings
warnings.filterwarnings("ignore", category=UserWarning, module="streamlit")
warnings.filterwarnings("ignore", category=DeprecationWarning)
logging.getLogger("streamlit").setLevel(logging.ERROR)

# ------------------------------------
# 🎨 Streamlit UI Customization
# ------------------------------------
st.set_page_config(page_title="Automated Data Analysis & ML Pipeline", layout="wide")

# Sidebar
st.sidebar.title("🔍 Navigation")
page = st.sidebar.radio("Go to:", ["Upload Data", "EDA", "ML Training"])

st.title("🚀 Automated Data Analysis & ML Pipeline")

# ------------------------------------
# 📂 Upload Dataset
# ------------------------------------
if page == "Upload Data":
    st.header("📂 Upload Your Dataset")
    uploaded_file = st.file_uploader("Upload CSV or Excel file", type=["csv", "xlsx"])

    if uploaded_file:
        df = pd.read_csv(uploaded_file) if uploaded_file.name.endswith('.csv') else pd.read_excel(uploaded_file)
        st.write("### 📌 Data Preview:")
        st.dataframe(df.head())
        st.session_state.df = df

# ------------------------------------
# 📊 Exploratory Data Analysis (EDA)
# ------------------------------------
elif page == "EDA":
    if "df" in st.session_state:
        df = st.session_state.df
        st.header("📊 Exploratory Data Analysis")

        st.subheader("🔍 Missing Values")
        missing_values = df.isnull().sum()
        st.write(missing_values[missing_values > 0])

        handle_missing = st.selectbox("How to handle missing values?", ["Mean Imputation", "Median Imputation", "Drop Rows", "Do Nothing"])
        if handle_missing == "Mean Imputation":
            df.fillna(df.mean(), inplace=True)
        elif handle_missing == "Median Imputation":
            df.fillna(df.median(), inplace=True)
        elif handle_missing == "Drop Rows":
            df.dropna(inplace=True)

        st.write("### ✅ Data after Handling Missing Values:")
        st.dataframe(df.head())

        st.subheader("📊 Data Distribution")
        selected_column = st.selectbox("Select a Column for Visualization", df.columns)
        fig = px.histogram(df, x=selected_column, title=f"Distribution of {selected_column}", color_discrete_sequence=['blue'])
        st.plotly_chart(fig)

# ------------------------------------
# 🤖 Machine Learning Model Training
# ------------------------------------
elif page == "ML Training":
    if "df" in st.session_state:
        df = st.session_state.df
        st.header("🤖 Machine Learning Model Training")
        target = st.selectbox("🎯 Select the Target Variable", df.columns)
        features = [col for col in df.columns if col != target]
        X_train, X_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.2, random_state=42)

        st.subheader("⚙️ Model Selection")
        model_type = st.radio("Select Task Type", ["Classification", "Regression"])
        model = RandomForestClassifier() if model_type == "Classification" else RandomForestRegressor()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        st.header("📉 Model Evaluation")
        if model_type == "Classification":
            acc = accuracy_score(y_test, y_pred)
            st.write(f"### ✅ Accuracy: {acc:.2f}")
            st.text(classification_report(y_test, y_pred))
        else:
            mse = mean_squared_error(y_test, y_pred)
            r2 = r2_score(y_test, y_pred)
            st.write(f"### 📉 Mean Squared Error: {mse:.2f}")
            st.write(f"### 📊 R-Squared: {r2:.2f}")